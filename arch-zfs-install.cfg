#!!/bin/bash

#Configurações Básicas
HOSTNAME="arch-linux"
TIMEZONE="America/Sao_Paulo"
LOCALE="pt_BR.UTF-8"
KEYMAP="br-abnt2"
USERNAME="jocker"
USER_PASSWORD="99154700"
ROOT_PASSWORD="JGr@99154700"

#Configurações de Disco
DISK="/dev/sda"
BOOT_PARTITION="${DISK}1"
ZFS_PARTITION="${DISK}2"
ZPOOL_NAME="zroot"

#Configurações de Rede
INTERFACE="eth0"

#Configuração ZFS
setup_zfs() {
    echo "Configurando ZFS..."

    #Criar Partições
    parted -s ${DISK} mklabel gpt
    parted -s ${DISK} mkpart primary 1MiB 513MiB
    parted -s ${DISK} set 1 esp on
    parted -s ${DISK} mkpart primary 513MiB 100%

    #Formatar Partição de boot
    mkfs.fat -F32 ${BOOT_PARTITION}

    #Criar pool ZFS
    zpool create -f -o ashift=12 \
    -O compression=lz4 \
    -O atime=off \
    -O relatime=on \
    -O xattr=sa \
    -O acltype=posixacl \
    -O mountpoint=none \
    ${ZPOOL_NAME} ${ZFS_PARTITION}

    #criar datasets 
    zfs create -o mountpoint=none ${ZPOOL_NAME}/ROOT
    zfs create -o mountpoint=/ ${ZPOOL_NAME}/ROOT/default
    zfs create -o mountpoint=/home ${ZPOOL_NAME}/home
    zfs create -o mountpoint=/var/log ${ZPOOL_NAME}/log
    zfs create -o mountpoint=/var/cache ${ZPOOL_NAME}/cache

    #Configurar datasets do sistema
    zfs set devices=off ${ZPOOL_NAME}
}

#Instalar Sistema BAse
install_base() {
    echo "Instalando Sistema Base..."

    #Montar partição boot
    mkdir -p /mnt/boot/efi
    mount ${BOOT_PARTITION} /mnt/boot/efi

    #Instalar pacotes Base
    pacstrap /mnt base base-devel linux linux-firmware \
        networkmanager sudo nano git curl wget

    #Gerar fstab
    genfstab -U /mnt >> /mnt/fstab
    echo "${BOOT_PARTITION} /boot/efi vfat defaults 0 2" >> /mnt/fstab
}

#Configurar chroot
configure_system() {
    echo "Configurando Sistema..."

    #Copiar script para chroot
    cat > /mnt/configure-chroot.sh << 'EOF'
#!/bin/bash

#Configurações Básicas
HOSTNAME="arch-linux"
TIMEZONE="America/Sao_Paulo"
LOCALE="pt_BR.UTF-8"
KEYMAP="br-abnt2"
USERNAME="jocker"
USER_PASSWORD="99154700"

# Configurar hostname
echo "${HOSTNAME}" > /etc/hostname

# Configurar timezone
ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
hwclock --systohc

# Configurar locale
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "${LOCALE} UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=${LOCALE}" > /etc/locale.conf

# Configurar keymap
echo "KEYMAP=${KEYMAP}" > /etc/vconsole.conf

# Configurar hosts
cat > /etc/hosts << HOSTS_EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   ${HOSTNAME}.localdomain ${HOSTNAME}
HOSTS_EOF

# Configurar ZFS no chroot
echo "Configurando ZFS no chroot..."
zpool set cachefile=/etc/zfs/zpool.cache zroot

# Gerar imagem initramfs com suporte ZFS
cat > /etc/mkinitcpio.conf << MKINIT_EOF
MODULES=(zfs)
BINARIES=()
FILES=()
HOOKS=(base udev autodetect modconf block keyboard zfs filesystems)
MKINIT_EOF

mkinitcpio -P

# Instalar bootloader (systemd-boot)
bootctl --path=/boot/efi install

cat > /boot/efi/loader/loader.conf << LOADER_EOF
default arch
timeout 5
console-mode max
editor 0
LOADER_EOF

mkdir -p /boot/efi/loader/entries
cat > /boot/efi/loader/entries/arch.conf << ENTRY_EOF
title Arch Linux (ZFS)
linux /vmlinuz-linux
initrd /initramfs-linux.img
options zfs=${ZPOOL_NAME}/ROOT/default rw
ENTRY_EOF

# Instalar pacotes adicionais
echo "Instalando pacotes adicionais..."

# ZFS
pacman -S --noconfirm zfs-dkms

# Shell e terminal
pacman -S --noconfirm zsh yakuake

# Ferramentas de rede
pacman -S --noconfirm networkmanager nmap dhcp dhclient

# Clientes de compartilhamento
pacman -S --noconfirm smbclient cifs-utils openssh freerdp

# Ferramentas de segurança
pacman -S --noconfirm metasploit

# Utilitários do sistema
pacman -S --noconfirm nemo tree neofetch htop

# Desktop Environment (opcional - KDE Plasma)
pacman -S --noconfirm plasma-meta konsole dolphin

# Drivers e codecs
pacman -S --noconfirm \
    alsa-utils \
    pulseaudio \
    pulseaudio-alsa \
    xf86-video-vesa \
    xf86-video-intel \
    xf86-video-amdgpu \
    xf86-video-nouveau \
    mesa \
    ttf-dejavu \
    ttf-liberation

# Habilitar serviços
systemctl enable NetworkManager
systemctl enable sshd
systemctl enable dhcpcd

# Configurar usuário
useradd -m -G wheel -s /bin/zsh ${USERNAME}
echo "${USERNAME}:${USER_PASSWORD}" | chpasswd
echo "root:${ROOT_PASSWORD}" | chpasswd

# Configurar sudo
echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers

# Configurar ZSH como shell padrão
chsh -s /bin/zsh ${USERNAME}

# Configurações do ZSH para o usuário
cat > /home/${USERNAME}/.zshrc << ZSH_EOF
# Configuração básica do ZSH
export ZSH="/home/${USERNAME}/.oh-my-zsh"

# Tema
ZSH_THEME="agnoster"

# Plugins
plugins=(git zsh-syntax-highlighting zsh-autosuggestions)

source \$ZSH/oh-my-zsh.sh

# Aliases úteis
alias ll='ls -la'
alias la='ls -A'
alias l='ls -CF'
alias zfs-list='zfs list'
alias zpool-status='zpool status'
ZSH_EOF

chown ${USERNAME}:${USERNAME} /home/${USERNAME}/.zshrc

# Instalar Oh My Zsh
su - ${USERNAME} -c 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended'

# Configurações finais do ZFS
zfs set mountpoint=legacy ${ZPOOL_NAME}/home
zfs set mountpoint=legacy ${ZPOOL_NAME}/log
zfs set mountpoint=legacy ${ZPOOL_NAME}/cache

echo "Instalação concluída!"
EOF

    chmod +x /mnt/configure-chroot.sh
    arch-chroot /mnt ./configure-chroot.sh
}

#Função Principal
main() {
    echo "Iniciando instalação automatizada do Arch Linux com ZFS..."
    
    #Verificar se está rodando como root
    if [[ $EUID -ne 0 ]]; then
        echo "Este script deve ser executado como root"
        exit 1
    fi

    #Carregar modulo ZFS
    mopdprobe zfs

    #Executar Instalação
    setup_zfs
    install_base
    configure_system

    echo "Instalação concluída! Reinicie o sistema."
}

#Executar função principal
main
